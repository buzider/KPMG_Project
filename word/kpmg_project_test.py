# -*- coding: utf-8 -*-
"""KPMG_project_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DP6Rs6o-e6pgWxN-3xcw1gFi9vp1NzdG
"""

#pip install MySQL
#import MySQLdb

import sys
import jieba
import string
import pandas as pd
from IPython.display import display
import chardet
from google.colab import files

#setting the output size of print dataframe
pd.set_option('display.unicode.ambiguous_as_wide', True)
pd.set_option('display.unicode.east_asian_width', True)
pd.set_option('display.width',180)

from google.colab import drive
drive.mount('/content/drive')

def Cutting(text):
  #mix the number without comma
  punct=string.punctuation
  text=text.replace(',','')
  text=text.replace(' ','')
  #load the dictionary
  jieba.load_userdict('drive/MyDrive/Financial_statements/dict.txt')

  #cutting
  Cut_Result=jieba.lcut(text)

  return Cut_Result

def Check_Index(Cut,Tar):
  Tar_Index=[]
  Index=0
  #Last=Cut.rindex(Tar)
  #while Index!=Last:
  #print(Cut)

  '''while(1):
    try:
      Index=Cut.index(Tar,Index+1)
      Tar_Index.append(Index)
    except ValueError:
      break
  '''
  for i in range(len(Cut)):
    if Tar in Cut[i]:
      Tar_Index.append(i)
  
  return Tar_Index

def GetTrueNum():
  TrueNum=1
  return TrueNum

def Check_Num(target,numlist,truenum):
  #target is the name of event and numlist is the list include all the number near the target
  correctness="False"
  #tar_num=get_tar_num要改成項目掛勾之正確數字
  #turenum=626479
  for num in numlist:
    sumnum=0
    for true_num in truenum:
      if true_num=="Null":
        continue
      else:
        sumnum+=int(true_num)
        if int(num)==int(true_num):
          correctness="True"
        elif int(num)==-int(true_num):
          correctness="True"
        elif int(num)==sumnum:
          correctness="SumTrue"
    #只要有一項正確就會改成True  
  return correctness

def GetNumStr(numlist):
  numstring=""
  #delete the duplicated number
  #numlist=[]
  #for num in dnumlist:
  #  if num not in numlist:
  #    numlist.append(num)
  #convert
  numlist=list(set(numlist))
  for i in range(len(numlist)):
    numstring+=numlist[i]
    if (i==len(numlist)-1):
      return numstring
    else:
      numstring+="/"

def Get_Num(Cut,Index,Target,Truenum,GetNULL=True):
  result=[]
  for i in Index:
    Indexint=int(i)
    event=[]
    event.append(Target)
    numlist=[]
    num=[]
    for j in range(Indexint,Indexint+15):
      if(all(elem.isdigit()for elem in Cut[j])):
        num.append(str(Cut[j]))
    #append the number list, Remark, and the check result
    #for number in numlist:
    #  if number not in numlist:
    #    num.append(number)
    if(len(num)==0):
      if GetNULL:
        #event.append("NULL")
        event.append("NULL")
        event.append("沒有數字項在項目附近")
        event.append("無須勾稽")
      else:
        continue
    elif(len(num)==1):
    #if numlist isn't empty check the correctness of the number within the database
      #event.append(num)
      event.append(GetNumStr(num))
      event.append("-")
      event.append(Check_Num(Target,num,Truenum))
    else:
      #event.append(num)
      event.append(GetNumStr(num))
      event.append("附近多於一個數")
      event.append(Check_Num(Target,num,Truenum))

    #check the correctness of the number within the database

    '''if (len(num)>1):
      event.append("多於一個數")
    elif (len(num)==1):
      event.append("-")
    else :
      event.append("沒有數字項在項目附近")'''
    result.append(event)
  return result

def connect_db(company_id_input,year_input,season_input):
    df = pd.read_csv(f"drive/MyDrive/Financial_statements/{company_id_input}/Balance_Sheet/{company_id_input}_{year_input}_{season_input}.csv")
    df2 = pd.read_csv(f"drive/MyDrive/Financial_statements/{company_id_input}/Cash_Flow_Statement/{company_id_input}_{year_input}_{season_input}.csv")
    df3 = pd.read_csv(f"drive/MyDrive/Financial_statements/{company_id_input}/Profit_and_Loss_Account/{company_id_input}_{year_input}_{season_input}.csv")
    df4 = pd.read_csv(f"drive/MyDrive/Financial_statements/{company_id_input}/Statement_of_changes_in_equity/{company_id_input}_{year_input}_{season_input}.csv")
    df_ls = [df,df2,df3,df4]
    return df_ls

def GetNumFromDB(company_id_input,year_input,season_input,input_ls):
    store_ls = []
    negative_ls = ["營業費用合計","財務成本淨額","所得稅費用（利益）合計","不重分類至損益之項目","與不重分類之項目相關之所得稅"]
    df_ls = connect_db(company_id_input,year_input,season_input)
    for search in input_ls:
        temp_ls = []
        for each_df in df_ls:
            try:
                filt = (each_df["會計項目Accounting Title"].str.contains(search))
                filt_result = each_df.loc[filt]
                if filt_result.empty:
                    continue
                else:
                    for i in range(len(filt_result)):
                        temp_num = filt_result.iloc[i,[3]][0]
                        if pd.isna(temp_num):
                            continue
                        else:
                            if "(" in str(temp_num):
                                temp_num = temp_num.replace("(","")
                                temp_num = temp_num.replace(")","")
                                temp_num = temp_num.replace(",","")
                                temp_num = str(-(int(temp_num)))
                            elif search in negative_ls:
                                temp_num =  str(-(int(temp_num)))
                            temp_ls.append(temp_num)
            except:
                pass
        if temp_ls == []:
            store_ls.append(["Null"])
        else:
            store_ls.append(temp_ls)
    return store_ls

def NullSign(GetNULL=True):
  if GetNULL:
    return ""
  else :
    return "noN"

"""# 正式文字勾稽部分

輸入代號、年份、季度/輸入文字部分-->抓會計師檢核內容<br>
檢核項目-->抓取文字內容之數據<br>

"""

#輸入代號、年份、季度
company_id_input=2707
year_input=2020
season_input=4

#得到會計師檢核內容
#word_true="f"
path=f"drive/MyDrive/Financial_statements/{company_id_input}/Auditor's_Report/{company_id_input}_{year_input}_{season_input}{word_true}.txt"
#path=f'drive/MyDrive/Financial_statements/Additional_Report{word_true}.txt'

f = open(path,'rb')
r = f.read()#獲取文本的編碼方式
f_charInfo = chardet.detect(r)
print(f_charInfo) #輸出文本格式信息
print(f_charInfo['encoding']) #取得文本格式
text=r.decode(f_charInfo['encoding'])
print(r.decode(f_charInfo['encoding'])) #通過取得的文本格式讀取txt
f.close()
text=text.replace(" ","")

#文字進行斷詞
Cut_Result=Cutting(text)
print(Cut_Result)

#輸入檢核項目
Target=["其他非流動資產","使用權資產","現金流量","租賃負債","資產總額","營業收入","現金及約當現金","現金股利"]


#truenumlist=[["3819177"],["3751080","123456789"],["11332199"],["6535609"]]
truenumlist=GetNumFromDB(company_id_input,year_input,season_input,Target)
print(truenumlist)


result_table=[]
GetNULL=False #if it is no need to reveal the event without number, then set GetNULL to False
for i in range(len(Target)):
  tar=Target[i]
  truenum=truenumlist[i]
  Tar_Index=Check_Index(Cut_Result,tar)
  near_num=Get_Num(Cut_Result,Tar_Index,tar,truenum,GetNULL)
  for i in near_num:
    result_table.append(i)
df=pd.DataFrame(result_table,columns=["項目","數字","備註","勾稽結果"])
print(" ")
#df=pd.DataFrame(result_table)
display(df)

null_sign=NullSign(GetNULL)

wordcheck_result_path=f"drive/MyDrive/Financial_statements/Word_Check_Result/{company_id_input}/{company_id_input}_{year_input}_{season_input}{word_true}{null_sign}.csv"
#wordcheck_result_path=f"{company_id_input}_{year_input}_Q{season_input}.csv"
#wordcheck_result_path=f"drive/MyDrive/Financial_statements/Word_Check_Result/Additional_Report{word_true}.csv"
#with open(wordcheck_result_path, 'w', encoding = 'utf-8-sig') as f:
#  df.to_csv(f)
df.to_csv(wordcheck_result_path)
#files.download(wordcheck_result_path)



"""# 以下是測試用code不用跑



"""

#text="  \nD.履約保證金：故宮晶華提供履約保證函$5,000，於依約完成所有\n資產移轉之相關程序後 3 個月內返還之。 \n(3)限制條款： \nA.開發經營期間應維持下列財務比率： \n  a.流動比率不得低於 100%。 \n  b.總負債金額不得超過淨值 1.5 倍。 \nB.故宮晶華之財務計劃應以提出經甄選評決之財務計劃為調整基\n礎。 \nC.除經國立故宮博物院同意，故宮晶華不得轉投資其他事業。 \nD.故宮晶華因經營本計劃所取得之資產及負債，不得設定任何負擔；\n非經國立故宮博物院同意，不得轉讓、出租。 \n9.達美樂為取得「DOMINO'S PIZZA」之營業權，於民國 107 年 1 月 1 日與\nDomino's Pizza International Franchising Inc.(DPIF)簽訂合約，\n其主要內容如下： \n(1)合約期限：至民國 121 年 12 月 31 日止。 \n(2)權利金： \n   A.開店權利金： \n (A)民國 107 年度為每店美金 3,000 元。 \n (B)民國 108 年度為每店美金 4,000 元。 \n     (C)民國 109 年度起為每店美金 5,000 元。  \n   B.營業權利金：按每期營業收入 3%收取，繳交予 DPIF。 \n10.營業租賃協議 \n請詳附註六(九)、(十)、(十八)及(三十五)說明。 \n11.子公司-FIH Management Limited(以下簡稱「FML」)於民國 107 年 7 月\n1 日與 IHG 及 RHW 簽訂股東協議合約，內容包括 RHW 未來之內部管理\n運作、相關成本費用分攤、Regent 品牌發展規劃及使用限制、財務審\n計資訊及股權買賣之相關事項等，其中並約定股東雙方於民國 115 年\n至民國 122 年間對 FML 所持有之 RHW 49%股權，FML 有向 IHG 出售之權\n利，IHG 亦有向 FML 購買之權利，交易價格以「行使權利之前一年度依\n合約約定調節後營業收入之 11 倍」計算。 \n十、重大之災害損失 \n無此情形。 \n十一、重大之期後事項 \n本公司於民國 109 年 3 月 23 日經董事會提議民國 108 年度盈餘分派案，請\n詳附註六(二十六)4.之說明。 \n十二、其他 \n(一)資本管理 \n本集團之資本管理目標，係為保障集團能繼續經營，維持最佳資本結構\n以降低資金成本，並為股東提供報酬。為了維持或調整資本結構，本集\n團可能會調整支付予股東之股利金額、退還資本予股東、發行新股或出\n售資產以降低債務。本集團利用負債比率以監控其資本，該比率係按總\n負債除以總權益計算。 \n~64~ "
punct=string.punctuation
#for i in punct:
  #text=text.replace(i,"")
text=text.replace(',',"")
text=text.replace(' ','')
###text=text.replace(" ","")
print(text)
print('|'.join(jieba.cut(text,cut_all=False,HMM=True)))
print('|'.join(jieba.cut(text,cut_all=False,HMM=False)))
print('|'.join(jieba.cut(text,cut_all=True,HMM=True)))
print('|'.join(jieba.cut(text,cut_all=True,HMM=False)))

print(jieba.lcut(text))

jieba.load_userdict('test.txt')
result=jieba.lcut(text)
print(result)
print(result[5])

target="營業收入"
target_index=result.index(target)
print("target位置",target_index)
for i in range(target_index,target_index+10):
  print("target後",i-target_index,"位：",result[i])
print(result[target_index+8])
IsNum=all(elem.isdigit()for elem in result[target_index+1])
print(IsNum)

import MySQLdb
import pandas as pd
conn = MySQLdb.Connect(host = 'localhost',
                       port = 3307,
                       user = 'root',
                       db = 'kpmg',
                       charset='utf8')
cur = conn.cursor()

# company_id_input = input("輸入公司id : ")
# kind_input = input("輸入kind : ")
# year_input = input("輸入year : ")
# season_input = input("輸入season : ")

company_id_input = 2707
kind_input = "Balance_Sheet"
year_input = 2019
season_input = 4
流動資產合計 = "現金及約當現金+透過損益按公允價值衡量之金融資產－流動+按攤銷後成本衡量之金融資產－流動+應收票據淨額+應收帳款淨額+應收帳款－關係人淨額+其他應收款+其他應收款－關係人+本期所得稅資產+存貨+預付款項+其他流動資產+其他金融資產－流動+其他流動資產－其他"
cur.execute(f"SELECT `path` FROM `financial_statements` WHERE `company_id` = {company_id_input} AND `kind` = '{kind_input}' AND `year` = {year_input} AND `season` = {season_input} ")
result_set = cur.fetchall()

df = pd.read_csv(f"../../{result_set[0][0]}")

流動資產合計 = {"流動資產合計":"現金及約當現金+透過損益按公允價值衡量之金融資產－流動+按攤銷後成本衡量之金融資產－流動+應收票據淨額+應收帳款淨額+應收帳款－關係人淨額+其他應收款+其他應收款－關係人+本期所得稅資產+存貨+預付款項+其他流動資產+其他金融資產－流動+其他流動資產－其他"}
all_function = [流動資產合計]
new_dict = {}
kind_list = []
money_list = []
status_list = []
for f in all_function:
    for k ,v in f.items():
        temp_sum = 0
        temp_ls = v.split("+")
        for i in temp_ls:
            filt = (df["會計項目Accounting Title"].str.contains(i))
            x = df.loc[filt]
            # print(i)
            try:
                temp_num = x.iloc[0,[3]][0]
                # print(temp_num)
                if "(" in temp_num:
                    temp_num = temp_num.replace("()","")
                    temp_num = -(int(temp_num))
                    temp_sum+=temp_num
                    pass
                else:
                    temp_num = int(temp_num)
                    temp_sum += temp_num 
            except:
                pass

        k_filt = (df["會計項目Accounting Title"].str.contains(k))
        k_x = df.loc[k_filt]
        k_num = k_x.iloc[0,[3]][0]
        if "(" in k_num:
            k_num = temp_num.replace("()","")
            k_num = -(int(k_num))
            pass
        else:
            k_num = int(k_num)

        if k_num == temp_sum:
            kind_list.append(k)
            money_list.append(k_num)
            status_list.append("True")
        else:
            kind_list.append(k)
            money_list.append(k_num)
            status_list.append("False")

        new_dict["會科"]=kind_list
        new_dict["金額"]=money_list
        new_dict["符合"]=status_list

df = pd.DataFrame(new_dict)
df

"""# 測試單項檢核項目"""

text="民國110年度餐飲收入及客房收入分別為新台幣1,625,601仟元及新台幣收入626,479仟元，分別佔合併總營業收入收入69.65%及26.84%。有關收入1625601營業收入之收入會1625601計政策，請詳合併財務報表附註四1625601（三十）；會計項目說明，收入請詳合併財務報表附註六（二十三）。"
Cut_Result=Cutting(text)
#print(Cut_Result) #check cut result

#load in the target string
Target='收入'
truenum="626479"
#print(Cut_Result.index(Target))
#check the all Index of Target string
Tar_Index=Check_Index(Cut_Result,Target)
#print(Tar_Index)

#check the number around the index
near_num=Get_Num(Cut_Result,Tar_Index,Target,truenum)
#print(near_num)


#convert into dataframe
df=pd.DataFrame(near_num,columns=["項目","數字","備註","勾稽結果"])
#print(df)
display(df)

"""# 測試多項檢核項目"""

#try multiple Target
text="民國110年度營業收入餐飲收入626479及客房收入分別為新台幣1,625,601仟元及新台幣收入626,479仟元，分別佔合併總營業收入收入69.65%及26.84%。有關收入1625601營業收入之收入會1625601計政策，請詳合併626479財務報表附註四1625601（三十）；會計項目說明，收入請詳合併財務報表附註六（二十三）。"
Cut_Result=Cutting(text)

Target=["收入","新台幣","新臺幣","營業收入","會計"]#,"新台幣","新臺幣","營業收入"
truenumlist=["626479","1625601","626479","626479","123456"]
result_table=[]

for i in range(len(Target)):
  tar=Target[i]
  truenum=truenumlist[i]
  Tar_Index=Check_Index(Cut_Result,tar)
  near_num=Get_Num(Cut_Result,Tar_Index,tar,truenum)
  for i in near_num:
    result_table.append(i)
df=pd.DataFrame(result_table,columns=["項目","數字","備註","勾稽結果"])
#df=pd.DataFrame(result_table)
display(df)